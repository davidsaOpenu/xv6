#!/usr/bin/expect -f

#-------------------------------------------------------------------------
#-HELPER PROCEDURES-------------------------------------------------------
#-------------------------------------------------------------------------

# - wrapper for checking the pid
# @argv - file name for logging
# @expect_str - the string to expect
proc pid_check { argv expect_str} {

    send "pid\n"
    log_file -noappend [lindex $argv 0]
    set timeout 2
    expect "$expect_str"
    assert_on_exit_status
}

proc assert_no_pouch_images { argv } {
    set timeout 3
    log_file -noappend [lindex $argv 0]

    send "pouch images\n"
    expect "No images available"
    expect "$ "
}

proc assert_abc_pouch_images { argv } {
    set timeout 3
    log_file -noappend [lindex $argv 0]
    send "pouch images\n"
    expect "Pouch images available:"
    expect "img_a"
    expect "img_b"
    expect "img_c"
    expect "$ "
}

proc prepare_pouch_images { argv } {
    set timeout 3
    assert_no_pouch_images $argv

    # copy /internal_fs_[abc] to /images/img_[abc]:
    foreach var {a b c} {
        send "cp /internal_fs_$var /images/img_$var\n"
        log_file -noappend [lindex $argv 0]
        assert_on_exit_status
    }

    log_file -noappend [lindex $argv 0]
    assert_abc_pouch_images $argv
}

proc remove_pouch_images { argv } {
    assert_abc_pouch_images $argv
    # remove /images/img_[abc]:
    foreach var {a b c} {
        send "rm /images/img_$var\n"
        log_file -noappend [lindex $argv 0]
        assert_on_exit_status
    }
    assert_no_pouch_images $argv
}

# - wrapper for container start command
# @argv - file name for logging
# @id - int for specifiyng container name
# @expect_str - the string to expect
proc start_container { argv id expect_str {image_name "img_a"} { exit_code 0 } } {
    send "pouch start c$id $image_name\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]
    expect "$expect_str"
    assert_on_exit_status $exit_code
}

# - wrapper for pouch connect command
# @argv - file name for logging
proc connect_container {argv id } {

    send "pouch connect c$id\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]

    # container can connect to any tty, checking here every one
    expect -re {tty[012] connected}
}

# - wrapper for pouch disconnect command
# @argv - file name for logging
proc disconnect_container {argv} {

    send "pouch disconnect\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]
    expect {
       "Console connected"
    }
}

# - wrapper for pouch destroy command
# @argv - file name for logging
proc destroy_container {argv id expect_str} {
    send "pouch destroy c$id\n"
    sleep 1

    set timeout 5
    log_file -noappend [lindex $argv 0]
    expect "$expect_str"
    assert_on_exit_status
}

proc assert_on_exit_status {{code 0} {wait_for_last_exit 1}} {
    if { $wait_for_last_exit } {
        expect {
            "$ "
        }
    }
    sleep 0.5
    send "echo $?\n"
    sleep 0.5

    # expect is not a line oriented
    # meaning a number of process exit status comes right after a new line
    expect -re "\\n(\\d+)" {
        set result $expect_out(1,string)
    }
    if { $result != $code } {
        puts "TEST HAS FAILED exit = $result, not $code" ; exit 1;
    }
    expect {
        "$ "
    }
}


#-------------------------------------------------------------------------
#-TESTS-------------------------------------------------------------------
#-------------------------------------------------------------------------

# - ioctl syscall tests
# - for details: ioctltests.c
# @argv - file name for logging
proc ioctl_syscall_test {argv} {

    set timeout 3
    send "ioctltests\n"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status
}

# - Stress test
# - scenarios that may lead to pouch operations failures
# @argv - file name for logging
proc pouch_stress_test {argv} {

    set timeout 3
    for {set x 0} {$x < 10} {incr x} {
        set running [start_container $argv "1" "Pouch: c1 starting" "img_a"]
        sleep 0.5
        set running [destroy_container $argv "1" "Pouch: c1 destroyed"]
        sleep 0.5
        log_file -noappend [lindex $argv 0]
    }
}

proc pouch_basic_tests {argv} {
    set running [pouch_start_test $argv]
    set running [pouch_connect_test $argv]
    set running [pouch_binaries_test $argv]
    set running [pouch_disconnect_test $argv]
    set running [pouch_destroy_test $argv]
}

# Test the 'rm' userspace utility with recursive flag
proc rm_recursive_test {argv} {
    set timeout 3
    log_file -noappend [lindex $argv 0]

    set depth 10
    set initial_path "/d1"
    set path "/"
    for {set i 1} {$i <= $depth} {incr i} {
        append path "/d${i}"
        send "mkdir $path\n"
        assert_on_exit_status
    }

    send "echo helloworld > $path/file.txt\n"
    assert_on_exit_status

    send "rm $initial_path\n"
    expect "cannot unlink $initial_path"

    send "cat $path/file.txt\n"
    expect "helloworld"

    send "rm -r $initial_path\n"
    assert_on_exit_status

    send "cat $path/file.txt\n"
    expect "cat: cannot open $path/file.txt"
}

proc cp_copy_file_test {argv} {
    set timeout 2
    log_file -noappend [lindex $argv 0]

    #bad args test
    send "cp f1\n"
    expect "cp requires two arguments: source and target"
    sleep 0.5

    #source file doesn't exist
    send "cp f1 f2\n"
    expect "can't locate f1"
    sleep 0.5

    #target dir doesn't exist
    send "echo test > f1\n"
    sleep 0.5
    send "cp f1 d1/f1\n"
    expect "can't create d1/f1, make sure the entire path exists"

    #test single file
    sleep 0.5
    send "cp f1 f2\n"
    sleep 0.5
    send "cat f2\n"
    expect "test"
    sleep 0.5

    #clean
    send "rm -r f1 f2\n"
    assert_on_exit_status
}

proc cp_copy_dir_test {argv} {
    set timeout 2
    log_file -noappend [lindex $argv 0]

    #one file in dir
    send "mkdir d1\n"
    sleep 0.5
    send "echo test > d1/f1\n"
    sleep 0.5
    send "mkdir d2\n"
    sleep 0.5
    send "cp d1 d2\n"
    sleep 0.5
    send "cat d2/f1\n"
    expect "test"
    sleep 0.5

    #recursive dir test
    send "mkdir d3\n"
    sleep 0.5
    send "mkdir d3/d4\n"
    sleep 0.5
    send "echo test > d3/d4/f1\n"
    sleep 0.5
    send "mkdir t1\n"
    sleep 0.5
    send "cp d3 t1\n"
    sleep 0.5
    send "cat t1/d4/f1\n"
    expect "test"
    sleep 0.5

    #dir in root dir, extra slash
    send "mkdir /a /b\n"
    sleep 0.5
    send "echo test > /a/c\n"
    sleep 0.5
    send "cp /a /b/\n"
    sleep 0.5
    send "cat /b/c\n"
    sleep 0.5
    expect "test"

    #clean
    send "rm -r d1 d2 d3 t1 a b\n"
    assert_on_exit_status
}

proc cp_simple_objfs_nativefs_copy_test {argv} {
    set timeout 2
    log_file -noappend [lindex $argv 0]

    send "mkdir d5 d6\n"
    assert_on_exit_status
    send "mkdir d5/objfs1 d5/objfs2\n"
    assert_on_exit_status
    send "mount -t objfs d5/objfs1\n"
    assert_on_exit_status
    send "mkdir d5/objfs1/some_dir\n"
    assert_on_exit_status
    send "mkdir d5/objfs1/some_dir/some_dir2\n"
    assert_on_exit_status
    send "echo test > d5/objfs1/some_dir/some_dir2/some_file\n"
    assert_on_exit_status
    send "mount -t objfs d5/objfs2\n"
    assert_on_exit_status
    send "mkdir d5/objfs2/d1\n"
    assert_on_exit_status
    send "mkdir d5/objfs2/d2\n"
    assert_on_exit_status
    send "echo test2 > d5/objfs2/d2/tfile\n"
    assert_on_exit_status

    send "cp d5 d6\n"
    assert_on_exit_status
    send "cat d6/objfs1/some_dir/some_dir2/some_file\n"
    expect "test"
    send "cat d6/objfs2/d2/tfile\n"
    expect "test2"

    send "umount d5/objfs1\n"
    assert_on_exit_status
    send "umount d5/objfs2\n"
    assert_on_exit_status

    #clean
    send "rm -r d5 d6\n"
    assert_on_exit_status
}

# - Nested bind mount across different fs types test
# @argv - file name for logging
proc cp_recursive_objfs_nativefs_test {argv} {
    set timeout -1
    log_file -noappend [lindex $argv 0]

    # Mount a new objfs
    send "mkdir /obj_mnt\n"
    assert_on_exit_status
    send "mount -t objfs /obj_mnt\n"

    # An arbitrary directories hierarchy depth, can be modified
    set depth 3

    # Create directories hierarchy in each fs.
    # In each directory create also an "aux" directory, in which create a simple text file.
    set objfs_path "/obj_mnt"
    set nativefs_path "/"
    for {set i 1} {$i <= $depth} {incr i} {
        append objfs_path "/od${i}"
        send "mkdir $objfs_path\n"
        assert_on_exit_status
        send "mkdir $objfs_path/od${i}_aux\n"
        assert_on_exit_status
        send "echo \"od${i}_aux/od${i}.txt\" >$objfs_path/od${i}_aux/od${i}.txt\n"
        assert_on_exit_status

        append nativefs_path "/nd${i}"
        send "mkdir $nativefs_path\n"
        assert_on_exit_status
        send "mkdir $nativefs_path/nd${i}_aux\n"
        assert_on_exit_status
        send "echo \"nd${i}_aux/nd${i}.txt\" >$nativefs_path/nd${i}_aux/nd${i}.txt\n"
        assert_on_exit_status
    }

    # Bind mount the directories from nativefs and the objfs
    # on the "aux" directories in nested structure
    set objfs_path "/obj_mnt/od1"
    set nativefs_path "/"
    set mix_path "$objfs_path"
    for {set i 1} {$i < $depth} {incr i} {
        append mix_path "/od${i}_aux"
        append nativefs_path "/nd${i}"
        send "mount -t bind $mix_path $nativefs_path\n"
        assert_on_exit_status
        sleep 0.5
        send "cat $mix_path/nd${i}_aux/nd${i}.txt\n"
        sleep 0.5
        expect "nd${i}_aux/nd${i}.txt"

        append mix_path "/nd${i}_aux"
        append objfs_path "/od[expr {$i + 1}]"
        send "mount -t bind $mix_path $objfs_path\n"
        assert_on_exit_status
        send "cat $mix_path/od[expr {$i + 1}]_aux/od[expr {$i + 1}].txt\n"
        sleep 0.5
        expect "od[expr {$i + 1}]_aux/od[expr {$i + 1}].txt"
    }

    # Unmount the previous bind mount and then verify the files content.
    for {set i $depth} {$i > 1} {incr i -1} {
        send "umount $mix_path\n"
        assert_on_exit_status
        send "cat $mix_path/nd[expr {$i - 1}].txt\n"
        sleep 0.5
        expect "nd[expr {$i - 1}]_aux/nd[expr {$i - 1}].txt"

        # Remove the last element from the "mix path" (the mount point we just unmounted)
        set last_separator [string last "/" $mix_path]
        set mix_path [string range $mix_path 0 [expr $last_separator - 1]]

        send "umount $mix_path\n"
        assert_on_exit_status
        send "cat $mix_path/od[expr {$i - 1}].txt\n"
        sleep 0.5
        expect "od[expr {$i - 1}]_aux/od[expr {$i - 1}].txt"

        # Remove the last element from the "mix path" (the mount point we just unmounted)
        set last_separator [string last "/" $mix_path]
        set mix_path [string range $mix_path 0 [expr $last_separator - 1]]
    }

    # Clean
    send "umount /obj_mnt\n"
    assert_on_exit_status
    send "rm -r /nd1 /obj_mnt\n"
    assert_on_exit_status
}

proc mount_bind_test {argv} {
    set timeout 2
    log_file -noappend [lindex $argv 0]

    send "mkdir bind_tests\n"
    send "cd bind_tests\n"
    sleep 0.5

    #one file in dir
    send "mkdir d1 d2\n"
    sleep 0.5
    send "echo test > d2/somefile\n"
    sleep 0.5
    send "mount -t bind d1 d2\n"
    sleep 0.5
    send "cat d1/somefile\n"
    expect "test"
    sleep 0.5
    send "umount d1\n"
    sleep 0.5

    #rm file in dir
    send "mkdir d3 d4\n"
    sleep 0.5
    send "echo test > d4/somefile\n"
    sleep 0.5
    send "mount -t bind d3 d4\n"
    sleep 0.5
    send "rm d3/somefile\n"
    sleep 0.5
    send "cat d4/somefile\n"
    expect "cat: cannot open d4/somefile"
    sleep 0.5
    send "umount d3\n"
    sleep 0.5

    #mount root dir
    send "mkdir d5\n"
    sleep 0.5
    send "mount -t bind / d5\n"
    sleep 0.5
    expect "Can't mount root directory"
    send "mount -t bind d5 /\n"
    sleep 0.5
    send "echo test > d5/somefile\n"
    sleep 0.5
    send "cat /somefile\n"
    expect "test"
    sleep 0.5
    send "umount d5\n"
    sleep 0.5

    #mount file
    send "mkdir d6\n"
    sleep 0.5
    send "echo test > somefile\n"
    sleep 0.5
    send "mount -t bind somefile d6\n"
    expect "mount point is not a directory"
    sleep 0.5

    send "cd ..\n"
    sleep 0.5

    #clean
    send "rm -r bind_tests\n"
    assert_on_exit_status
}

# - xv6 umount test
# @argv - file name for logging
proc umount_bind_mount_test {argv} {
    send "mkdir orig\n"
    assert_on_exit_status
    send "echo test > orig/tfile\n"
    assert_on_exit_status
    send "mkdir bind_f\n"
    assert_on_exit_status
    send "mount -t bind bind_f orig\n"
    assert_on_exit_status
    send "cat bind_f/tfile\n"
    expect "test"

    send "umount bind_f\n"
    assert_on_exit_status
    send "cat bind_f/tfile\n"
    expect "cat: cannot open bind_f/tfile"

    #clean
    send "rm -r orig bind_f\n"
    assert_on_exit_status
}

# - This test start the container
# - The pid should be 2 because we still remain in the console,
# - and not connected to any tty device yet
# - Finally we destroy the container
# @argv - file name for logging
proc pouch_start_test {argv} {

    set running [start_container $argv "1" "Pouch: c1 starting" "img_a"]
    set timeout 3
    set running [pid_check $argv "PID: 2"]
    sleep 2
}

# - * This test checks container connection after it was started,
# - once the container is connected the pid should be 1
# - * Also we try to destroy the container once we are connected to it
# - this shoul'd not happen
# - * After disconnect we can destroy it
# @argv - file name for logging
proc pouch_connect_test {argv} {

    #assuming container is already started
    set timeout 3
    set running [connect_container $argv "1"]
    set timeout 3
    set running [pid_check $argv "PID: 1"]

}

proc pouch_binaries_test {argv} {
    set timeout 1
    sleep 0.5
    send "echo test > testfile\n"
    sleep 0.5
    expect "$ "
    sleep 0.5
    send "cat testfile\n"
    sleep 0.5
    expect "test"
    sleep 0.5
}


# - Test checks disconnecting from the container back to console
# - it means PID shoud be 2
# @argv - file name for logging
proc pouch_disconnect_test {argv} {

    set timeout 3
    set running [disconnect_container $argv]
    set timeout 3
    set running [pid_check $argv "PID: 2"]

}


# - Test starts the container and checks the file that was created
# - after we destroy the container recheck for the file
# @argv - file name for logging
proc pouch_destroy_test {argv} {

    #assuming container is already created
    send "ls c1\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]
    expect -re {c1\s+2\s+[0-9]+\s+[0-9]+}

    set running [destroy_container $argv "1" "Pouch: c1 destroyed"]

    set timeout 3
    send "ls c1\n"
    log_file -noappend [lindex $argv 0]
    expect {
       "ls: cannot open c1"
    }

}


proc command_exit_status_test {argv} {
    set timeout 1
    log_file -noappend [lindex $argv 0]

    # Test cd
    send "cd baddirname_itdoesntexist\n"
    expect "$ "
    sleep 1
    send "echo $?\n"
    sleep 1
    expect -re "\\n-2"

    # Test exec
    send "thereisnosuchcommand\n"
    expect "$ "
    sleep 1
    send "echo $?\n"
    sleep 1
    expect -re "\\n1"
}


# - Test tries to create 4 containers, in the last one we are expecting:
# - 'Cannot find tty' because there are only 3 containers available
# @argv - file name for logging
proc pouch_to_many_cnts_test {argv} {
    set running [start_container $argv "1" "Pouch: c1 starting" "img_a"]
    set running [start_container $argv "2" "Pouch: c2 starting" "img_b"]
    set running [start_container $argv "3" "Pouch: c3 starting" "img_c"]
    set running [start_container $argv "4" "Pouch: cannot create more containers" "img_a" 1]

}

proc pouch_to_many_cnts_test_remove {argv} {
    set running [destroy_container $argv "1" "Pouch: c1 destroyed"]
    set running [destroy_container $argv "2" "Pouch: c2 destroyed"]
    set running [destroy_container $argv "3" "Pouch: c3 destroyed"]
}

# - Display containers list, inside and outside of container
# @argv - file name for logging
proc pouch_list_test {argv} {

    #this test assumes there are 3 started containers
    send "pouch list all\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]
    expect "Pouch containers:"
    expect "1. c1 : started"
    expect "2. c2 : started"
    expect "3. c3 : started"

    set running [connect_container $argv "1"]
    send "\n"

    send "pouch list all\n"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status
    log_file -noappend [lindex $argv 0]

    set running [disconnect_container $argv]
}


# - Limit cgroup test:
# @argv - file name for logging
proc pouch_cgroup_limit_test {argv} {
    set timeout 10

    send "pouch start c1\n"
    sleep 1
    send "pouch cgroup c1 cpu.max 10000,20000\n"

    log_file -noappend [lindex $argv 0]

    expect {
       "Pouch: c1 cgroup applied"
    }

    set timeout 10
    send "cat /cgroup/c1/cpu.max\n"
    log_file -noappend [lindex $argv 0]

    expect {
       -re ".*max - 10000.*period - 20000.*"
    }

}


# - Cgroup already exists test:
# - check that container is not created if cgroup with give container's name already exists
# @argv - file name for logging
proc pouch_cgroup_already_exists {argv} {

    set timeout 3
    send "mkdir /cgroup/c5\n"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status
    set timeout 3
    set running [start_container $argv "5" "cgroup already exists" "img_a" 1]
    log_file -noappend [lindex $argv 0]
    expect "Pouch: Failed to create cgroup with the given name. Consider another container name: c5"
}


# - Disconnect outside:
# - test error message in this scenario
# - if running pouch 'disconnect outside' - print help for outside commands
# - if giving a wrong cname outside - respond with correct error message
# @argv - file name for logging
proc pouch_disconnect_outside_container_test {argv} {

    #check we are outside
    set running [pid_check $argv "PID: 2"]

    send "pouch disconnect c6\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]
    expect {
       "Pouch: no container is connected"
    }
    assert_on_exit_status 1
    sleep 1
    send "pouch disconnect\n"
    sleep 1
    set timeout 3
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status
}


# - Pouch info test:
# - test error messages in different scenarios
# - if running pouch info outside - should print help for outside commands
# - if giving a wrong cname - should respond with correct error message
# @argv - file name for logging
proc pouch_info_container_test {argv} {

    #check we are outside
    set running [pid_check $argv "PID: 2"]
    send "pouch info\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status
    sleep 2
    send "pouch info c6\n"
    set timeout 3
    log_file -noappend [lindex $argv 0]
    expect "There is no container: c6 in a started stage"
}


# - xv6 usertests
# @argv - file name for logging
proc usertests {argv} {
    set timeout -1
    #clean expect buffer
    expect *

    send "mkdir usertests_dir\n"
    assert_on_exit_status
    send "cd usertests_dir\n"
    assert_on_exit_status

    send "usertests\n"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status

    send "cd ..\n"
    # TODO(SM): insert these lines only after objfs multiple devices bug fix
    #send "rm -r usertests_dir\n"
}

# - xv6 cgroup tests
# @argv - file name for logging
proc cgroupstests {argv} {
    set timeout -1
    #clean expect buffer
    expect *

    send "mkdir cgroup_tests_dir\n"
    assert_on_exit_status
    send "cd cgroup_tests_dir\n"
    assert_on_exit_status

    send "cgroupstests\n"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status

    send "cd ..\n"
    assert_on_exit_status
    send "rm -r cgroup_tests_dir\n"
    assert_on_exit_status
}

# - xv6 cgroup IO stats tests
proc cgroup_io_states_test {argv} {
    set timeout 2

    set running [start_container $argv "temp" "Pouch: ctemp starting" "img_a"]
    sleep 1
    send "cat /cgroup/ctemp/io.stat\n"
    expect "1:1 rbytes=0 wbytes=0 rios=0 wios=0"

    send "pouch connect ctemp\n"
    expect "tty0 connected"

    sleep 1
    send "cat /cgroup/ctemp/io.stat\n"
    expect "1:1 rbytes=26 wbytes=0 rios=26 wios=0"

    send "echo 12345678901234567890\n"
    sleep 1
    send "cat /cgroup/ctemp/io.stat\n"
    expect "1:1 rbytes=78 wbytes=64 rios=78 wios=7"

    send "pouch disconnect\n"
    expect {
       "Console connected"
    }
    set running [destroy_container $argv "temp" "Pouch: ctemp destroyed"]
    
    set running [start_container $argv "test" "Pouch: ctest starting" "img_a"]
    
    sleep 1
    send "cat /cgroup/ctest/io.stat\n"
    expect "1:1 rbytes=95 wbytes=106 rios=95 wios=11"
    set running [destroy_container $argv "test" "Pouch: ctest destroyed"]
}

# - xv6 pidns tests
# @argv - file name for logging
proc pidns_tests {argv} {
    set timeout -1

    send "mkdir pidns_test_dir\n"
    assert_on_exit_status
    send "cd pidns_test_dir\n"
    assert_on_exit_status

    send "pidns_tests\n"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status

    send "cd ..\n"
    assert_on_exit_status
    send "rm -r pidns_test_dir\n"
    assert_on_exit_status
}

# - xv6 mntns tests
# @argv - file name for logging
proc mounttest {argv} {
    set timeout -1
    send "mounttest\n"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status
}

# - pouch build image command line test, invalid arguments
# @argv - file name for logging
proc test_pouch_build_invalid_args {argv} {
    set timeout 3

    # pouch build <invalid args> combinations, should fail.
    send "pouch build add\n"
    expect "Error: Unexpected argument add!"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1

    send "pouch build --abb b\n"
    expect "Error: Unexpected argument --abb!"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1

    send "pouch build --tag\n"
    log_file -noappend [lindex $argv 0]
    expect "Error: Expected tag name after --tag"
    assert_on_exit_status 1

    send "pouch build --file a --tag\n"
    expect "Error: Expected tag name after --tag"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1

    send "pouch build --file --tag jkjk\n"
    expect "Error: Unexpected argument jkjk!"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1

    send "pouch build --file\n"
    expect "Error: Expected file name after --file"
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1

    send "pouch build --file a --file b\n"
    expect "Error: Specified more than one --file argument."
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1

    send "pouch build --file a --tag b --file b\n"
    expect "Error: Specified more than one --file argument."
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1

    send "pouch build --tag a --file b --tag b\n"
    expect "Error: Specified more than one --tag argument."
    log_file -noappend [lindex $argv 0]
    assert_on_exit_status 1
}

# - pouch build image command line test, valid arguments
# @argv - file name for logging
proc test_pouch_build_valid_args {argv} {
    set timeout 3

    send "echo IMPORT abc > Pouchfile\n"

    send "pouch build\n"
    expect "Building pouch image from \"Pouchfile\" to tag \"default\"..."
    expect "Built image to tag \"default\"."

    assert_on_exit_status
    log_file -noappend [lindex $argv 0]

    send "pouch build --tag hello\n"
    expect "Building pouch image from \"Pouchfile\" to tag \"hello\"..."
    expect "Built image to tag \"hello\"."
    assert_on_exit_status
    log_file -noappend [lindex $argv 0]

    send "echo IMPORT abc > MyFile\n"
    send "pouch build --file MyFile\n"
    expect "Building pouch image from \"MyFile\" to tag \"default\"..."
    expect "Built image to tag \"default\"."
    assert_on_exit_status
    log_file -noappend [lindex $argv 0]

    send "echo IMPORT abc > MyPouchFile\n"
    send "pouch build --file MyPouchFile --tag myimagetag\n"
    expect "Building pouch image from \"MyPouchFile\" to tag \"myimagetag\"..."
    expect "Built image to tag \"myimagetag\"."
    assert_on_exit_status
    log_file -noappend [lindex $argv 0]

    send "echo IMPORT abc > My22PouchFile\n"
    send "pouch build --tag my3imagetag --file My22PouchFile\n"
    expect "Built image to tag \"my3imagetag\"."
    assert_on_exit_status
    log_file -noappend [lindex $argv 0]
}

proc test_pouch_build_file_parsing {argv} {
    # iterate over Valid1.Pouchfile, Valid2.Pouchfile, build and assert_on_exit_status
    set timeout 3

    set valid_pouchfiles [list Valid1.Pouchfile Valid2.Pouchfile]
    foreach elem $valid_pouchfiles {
        send "pouch build --file $elem\n"
        assert_on_exit_status
    }

    set valid_syntax_pouchfiles [list ValidSyntax1.Pouchfile ValidSyntax2.Pouchfile]
    foreach elem $valid_syntax_pouchfiles {
        send "pouch build --file $elem\n"
        # This would need to be modified once build is implemnted properly.
        assert_on_exit_status
    }

    set invalid_syntax_pouchfiles [list \
        Invalid1.Pouchfile Invalid2.Pouchfile Invalid3.Pouchfile \
        Invalid4.Pouchfile Invalid5.Pouchfile Invalid6.Pouchfile \
        Invalid7.Pouchfile Invalid8.Pouchfile Invalid9.Pouchfile]
    foreach elem $invalid_syntax_pouchfiles {
        send "pouch build --file $elem\n"
        assert_on_exit_status 1
    }
}

proc test_internal_images {argv} {
    # For each one of internal_fs_[a,b,c], mount it, check if it is mounted, unmount it, check if it is unmounted.
    set timeout 3
    set internal_images [list a b c]
    foreach elem $internal_images {
        send "mkdir /m$elem\n"
        assert_on_exit_status
        send "mount internal_fs_$elem /m$elem\n"
        assert_on_exit_status
        send "ls /m$elem\n"
        send "umount /m$elem\n"
        assert_on_exit_status
    }
}

#-------------------------------------------------------------------------
#-MAIN--------------------------------------------------------------------
#-------------------------------------------------------------------------

# no limit - usertests are time consuming
set timeout -1

# run standalone tests
spawn bash -c "make run-vector-tests"
expect eof
set result [wait]
if {[lindex $result 2] == 0} {
    puts "VECTOR TESTS HAVE PASSED"
} else {
    puts "VECTOR TESTS HAVE FAILED"
    exit 1
}

# dry-run to get qemu command - to end qemu with close afterwards
spawn bash -c "make -n qemu-nox | grep qemu"
expect eof
set qemu_command $expect_out(buffer)

# TODO: use the resut of dry run as an agument fot spawn ($expect_out(buffer) is not working for some reason)
# actual run
spawn qemu-system-i386 -nographic -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp cpus=2,cores=1 -m 512
expect "$ "

#uncomment for expect debugging
#exp_internal 1
set running [mounttest $argv]
set running [ioctl_syscall_test $argv]
set running [cgroupstests $argv]
set running [prepare_pouch_images $argv]
set running [cgroup_io_states_test $argv]

#basic tests
set running [rm_recursive_test $argv]
set running [cp_copy_file_test $argv]
set running [cp_copy_dir_test $argv]
set running [mount_bind_test $argv]
set running [umount_bind_mount_test $argv]
set running [pouch_basic_tests $argv]
set running [command_exit_status_test $argv]

# scenario tests
set running [cp_simple_objfs_nativefs_copy_test $argv]
set running [cp_recursive_objfs_nativefs_test $argv]

set running [pouch_stress_test $argv]
set running [pouch_cgroup_already_exists $argv]

set running [pouch_to_many_cnts_test $argv]
set running [pouch_list_test $argv]
set running [pouch_disconnect_outside_container_test $argv]
set running [pouch_info_container_test $argv]
set running [pouch_cgroup_limit_test $argv]
set running [pouch_to_many_cnts_test_remove $argv]

set running[remove_pouch_images $argv]

set running [test_pouch_build_valid_args $argv]
set running [test_pouch_build_invalid_args $argv]
set running [test_pouch_build_file_parsing $argv]

set running [pidns_tests $argv]
set running [test_internal_images $argv]
# run last, prints "ALL TESTS PASSED"
set running [usertests $argv]

log_file
# just in case
close
